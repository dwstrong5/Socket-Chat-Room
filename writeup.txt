Write your assignment writeup in this file. Refer to the assignment PDF for details. Do not change this file name.


1) Declare/discuss any aspects of your client or server code that are not working.  What are your intuitions about why things are not working?  What issues you already tried and ruled out?  Given more time, what would you try next?  Detailed answers here are critical to getting partial credit for malfunctioning programs.

While the general functionality of our program works as intended, we have encountered some bugs that have plagued us for a while and can't seem to figure out. Most notable, the initial prompt for Enter message: in the participant prints twice but prints normal after that. Sean and I have checked over and can't seem to understand why it is happening. My intuition leads me to believe that it has something to do with the 1 second delay at the top of the while(1) loop in the participant that checks if the server has closed the socket. Another bug that we've encountered is the general formatting, as our code tends to print a \n between messages in the observer. While not detrimental to the functionality of the program, it is a bit of a nuisance. Again, we've checked that a \n isn't being appended when the server broadcasts the message to the observers and it should only be appended by the observer if it doesn't already have a \n character. Again, not sure why this is the case. The last, more pressing issue that we've faced is the timeout options. with this being a more involved project with intricate details, we could have spent some more time ensuring that these were functioning properly and confirmed our usage with Shri. If we were given additional time to work on this assignment, that would be the next priority for us to dive into.

2) Any assumptions you made for things not described in the specifications.

It was a little strange interpreting which pieces of the program (server, participant, and/or observer) that needed to check for whitespace, non-whitespace, length, etc. To make this easier on ourselves, we just have all 3 parts checking for proper criteria when necessary. We understand that it's largely inefficient, but it actually helped us take less time by implementing it than worrying where to pick/choose to implement it. 

3) In a few sentences, describe how you tested that your code was working.

Testing was a bit tedious (as it has been with both prior assignments). This was largely in part due to different behavior depending on which machine was compiling it. I still can't explain it, as I don't see how my method of ssh'ing into the lab machines would be any different than hosting on Sean's local machine. Nevertheless, whenever we compiled and tested, we always did with our respective setup and prioritized solving issues that were evident on both machines. Once those were solved, we started troubleshooting the less-prominent issues and were able to isolate ones that weren't likely to happen under proper circumstances (no use of ssh).

4) What was the most challenging aspect of this assignment, and why?

I think Sean and I both agree that upon inspection, this assignment seemed less daunting than assignment 2. Still, it presented its challenges. Most notably, the use and understanding of how and when to use select. I still don't think that I feel fully comfortable with it, but I definitely have somewhat of an understanding of it now. Implementing the timeouts and checks to see if the socket was closed by the server was also a little tricky to understand and implement. A huge shoutout to Shri for the office hours and advice via Slack for making our time a bit easier in this regard.

5) What variant/extension of this assignment would you like to try (e.g. a variant that is more powerful, more interesting, etc.)
First, a fully functional version of this program would be really fun to do; without a 2ish-week long requirement. This is one of the most interesting projects that I've done during my time as a CS undergrad. Next, I think it would be really interesting to combine the observer and participant into one client and provide oppotunities for user input and real-time updates all in one single client. It would also be nice to implement an option for playing a simple word game (i.e. hangman or the word game from assignment 2) between two or more clients.
